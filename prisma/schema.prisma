generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  name             String
  username         String           @unique
  password         String
  phone            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  photo            String?
  listings         Listing[]
  listingHistories ListingHistory[]
}

model Category {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  description   String?
  listings      Listing[]
  propertyTypes PropertyType[]
}

model PropertyType {
  id         String    @id @default(cuid())
  name       String
  slug       String    @unique
  categoryId String
  listings   Listing[]
  category   Category  @relation(fields: [categoryId], references: [id])
}

model District {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  listings Listing[]
}

model Listing {
  id                String           @id @default(cuid())
  title             String
  categoryId        String
  userId            String
  address           String?
  latitude          Float?
  longitude         Float?
  fullAddress       String?
  houseArea         Float?
  landArea          Float?
  floor             Int?
  totalFloors       Int?
  condition         String?
  yearBuilt         Int?
  noEncumbrances    Boolean?         @default(false)
  price             Float
  currency          String           @default("â‚½")
  dateAdded         DateTime         @default(now())
  listingCode       String           @unique
  status            String           @default("active")
  adminComment      String?
  publicDescription String?
  dealType          DealType         @default(SALE)
  balconyType       BalconyType?
  bathroomType      BathroomType?
  buildingType      BuildingType?
  kitchenArea       Float?
  noShares          Boolean?         @default(false)
  windowsView       WindowsView?
  districtId        String?
  typeId            String?
  comments          Comment[]
  images            Image[]
  category          Category         @relation(fields: [categoryId], references: [id])
  districtRef       District?        @relation(fields: [districtId], references: [id])
  propertyType      PropertyType?    @relation(fields: [typeId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
  history           ListingHistory[]
}

model Image {
  id         String  @id @default(cuid())
  listingId  String
  path       String
  isFeatured Boolean @default(false)
  listing    Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  listingId String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model ListingHistory {
  id        String   @id @default(cuid())
  listingId String
  userId    String
  changes   Json
  createdAt DateTime @default(now())
  action    String   @default("update")
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

enum DealType {
  SALE
  RENT
}

enum BuildingType {
  BRICK
  PANEL
  MONOLITH
  OTHER
}

enum BalconyType {
  BALCONY
  LOGGIA
  BOTH
  NONE
}

enum BathroomType {
  COMBINED
  SEPARATE
  MULTIPLE
}

enum WindowsView {
  COURTYARD
  STREET
  BOTH
}
